{
    "manifest.types.$ImageData.unsupported": true,
    "browserAction.functions.%isEnabled.!fixAsync": "enabled:boolean",
    "browserAction.functions.%openPopup.!fixAsync": null,
    "clipboard.functions.%setImageData.!fixAsync": null,
    "commands.functions.%update.!fixAsync": null,
    "commands.functions.%reset.!fixAsync": null,
    "contentScripts.functions.%register.!fixAsync": "handle:RegisteredContentScript",
    "contentScripts.types.$RegisteredContentScript.functions.%unregister.!fixAsync": null,
    "contextualIdentities.functions.%get.!fixAsync": "contextualIdentity:ContextualIdentity",
    "contextualIdentities.functions.%query.!fixAsync": "contextualIdentity:ContextualIdentity[]",
    "contextualIdentities.functions.%create.!fixAsync": "contextualIdentity:ContextualIdentity",
    "contextualIdentities.functions.%update.!fixAsync": "contextualIdentity:ContextualIdentity",
    "contextualIdentities.functions.%remove.!fixAsync": "contextualIdentity:ContextualIdentity",
    "find.functions.%highlightResults.!fixAsync": null,
    "find.functions.%removeHighlighting.!fixAsync": null,
    "find.types": [{
        "id": "RangeData",
        "type": "object",
        "properties": {
            "framePos": {
                "type": "integer",
                "description": "The index of the frame containing the match. 0 corresponds to the parent window. Note that the order of objects in the rangeData array will sequentially line up with the order of frame indexes: for example, framePos for the first sequence of rangeData objects will be 0, framePos for the next sequence will be 1, and so on.",
                "minimum": 0
            },
            "startTextNodePos": {
                "type": "integer",
                "description": "The ordinal position of the text node in which the match started.",
                "minimum": 0
            },
            "endTextNodePos": {
                "type": "integer",
                "description": "The ordinal position of the text node in which the match ended.",
                "minimum": 0
            },
            "startOffset": {
                "type": "integer",
                "description": "The ordinal string position of the start of the matched word within start text node.If match word include in single text node, Extension can get match word between startOffset and endOffset string index in the single text node.",
                "minimum": 0
            },
            "endOffset": {
                "type": "integer",
                "description": "The ordinal string position of the end of the matched word within end text node.",
                "minimum": 0
            }
        }
    }, {
        "id": "Rectangle",
        "type": "object",
        "properties": {
            "top": {
                "type": "number",
                "description": "Pixels from the top."
            },
            "left": {
                "type": "number",
                "description": "Pixels from the left."
            },
            "bottom": {
                "type": "number",
                "description": "Pixels from the bottom."
            },
            "right": {
                "type": "number",
                "description": "Pixels from the right."
            }
        }
    }, {
        "id": "RectsAndTexts",
        "type": "object",
        "properties": {
            "rectList": {
                "type": "array",
                "items": { "$ref": "Rectangle" },
                "description": "Rectangles relative to the top-left of the viewport."
            },
            "textList": {
                "type": "array",
                "items": { "$ref": "string" },
                "description": "an array of strings, corresponding to the rectList array. The entry at textList[i] contains the part of the match bounded by the rectangle at rectList[i]."
            }
        }
    }, {
        "id": "RectData",
        "type": "object",
        "properties": {
            "rectsAndTexts": {
                "type": "RectsAndTexts",
                "description": "The index of the frame containing the match. 0 corresponds to the parent window. Note that the order of objects in the rangeData array will sequentially line up with the order of frame indexes: for example, framePos for the first sequence of rangeData objects will be 0, framePos for the next sequence will be 1, and so on."
            },
            "text": {
                "type": "string",
                "description": "The complete text of the match."
            }
        }
    }, {
        "id": "FindResult",
        "type": "object",
        "properties": {
            "count": {
                "type": "integer",
                "description": "The number of results found.",
                "minimum": 0
            },
            "rangeData": {
                "type": "array",
                "items": { "$ref": "RangeData" },
                "description": "If includeRangeData was given in the options parameter, then this property will be included. It is provided as an array of RangeData objects, one for each match. Each RangeData object describes where in the DOM tree the match was found. This would enable, for example, an extension to get the text surrounding each match, so as to display context for the matches. The items correspond to the items given in rectData, so rangeData[i] describes the same match as rectData[i].",
                "optional": true
            },
            "rectData": {
                "type": "array",
                "items": { "$ref": "RectData" },
                "description": " If includeRectData was given in the options parameter, then this property will be included. It is an array of RectData objects. It contains client rectangles for all the text matched in the search, relative to the top-left of the viewport. Extensions can use this to provide custom highlighting of the results.",
                "optional": true
            }
        }
    }],
    "find.functions.%find.!fixAsync": "result:FindResult",
    "menus.functions.%refresh.!fixAsync": null,
    "pageAction.functions.%isShown.!fixAsync": "shown:boolean",
    "pageAction.functions.%setPopup.!fixAsync": null,
    "pageAction.functions.%openPopup.!fixAsync": null,
    "pkcs11.types": [{
        "id": "Token",
        "type": "object",
        "properties": {
            "name": {
                "type": "string",
                "description": "Name of the token."
            },
            "manufacturer": {
                "type": "string",
                "description": "Name of the token's manufacturer."
            },
            "HWVersion": {
                "type": "string",
                "description": "Hardware version, as a PKCS #11 version number (two 32-bit integers separated with a dot, like \"1.0\"."
            },
            "FWVersion": {
                "type": "string",
                "description": "Firmware version, as a PKCS #11 version number (two 32-bit integers separated with a dot, like \"1.0\"."
            },
            "serial": {
                "type": "string",
                "description": "Serial number, whose format is defined by the token specification."
            },
            "isLoggedIn": {
                "type": "boolean",
                "description": "true if the token is logged on already, false otherwise."
            }
        }
    }, {
        "id": "ModuleSlot",
        "type": "object",
        "properties": {
            "name": {
                "type": "string",
                "description": "The name of the slot."
            },
            "token": {
                "type": "Token|null",
                "description": "The token of the slot."
            }
        }
    }],
    "pkcs11.functions.%getModuleSlots.!fixAsync": "ModuleSlot[]",
    "pkcs11.functions.%isModuleInstalled.!fixAsync": "shown:boolean",
    "pkcs11.functions.%installModule.!fixAsync": null,
    "pkcs11.functions.%uninstallModule.!fixAsync": null,
    "proxy.functions.%register.!fixAsync": null,
    "proxy.functions.%unregister.!fixAsync": null,
    "sessions.functions.%forgetClosedTab.!fixAsync": null,
    "sessions.functions.%forgetClosedWindow.!fixAsync": null,
    "sessions.functions.%setTabValue.!fixAsync": null,
    "sessions.functions.%getTabValue.!fixAsync": "value:any",
    "sessions.functions.%removeTabValue.!fixAsync": null,
    "sessions.functions.%setWindowValue.!fixAsync": null,
    "sessions.functions.%getWindowValue.!fixAsync": "value:any",
    "sessions.functions.%removeWindowValue.!fixAsync": null,
    "sidebarAction.functions.%setTitle.!fixAsync": null,
    "sidebarAction.functions.%getTitle.!fixAsync": "title:string",
    "sidebarAction.functions.%setIcon.!fixAsync": null,
    "sidebarAction.functions.%setPanel.!fixAsync": null,
    "sidebarAction.functions.%getPanel.!fixAsync": "url:string",
    "sidebarAction.functions.%open.!fixAsync": null,
    "sidebarAction.functions.%close.!fixAsync": null,
    "sidebarAction.functions.%isOpen.!fixAsync": "open:boolean",
    "tabs.functions.%discard.!fixAsync": null,
    "tabs.functions.%toggleReaderMode.!fixAsync": null,
    "tabs.functions.%captureTab.!fixAsync": "dataUrl:string",
    "tabs.functions.%show.!fixAsync": null,
    "tabs.functions.%hide.!fixAsync": "hiddenTabIds:number[]",
    "theme.functions.%getCurrent.!fixAsync": "theme:any",
    "theme.functions.%update.!fixAsync": null,
    "theme.functions.%reset.!fixAsync": null,
    "webRequest.functions.%getSecurityInfo.!fixAsync": "info:SecurityInfo",
    "storage.types.$StorageArea.functions.%get.parameters.%keys.choices.#0.type": "null | string",
    "storage.types.$StorageArea.functions.%get.parameters.%keys.choices.#2.type": "{[s:string] : any}",
    "storage.types.$StorageArea.functions.%get.parameters.%keys.choices.#2.additionalProperties": null,
    "storage.types.$StorageArea.functions.%get.parameters.%callback.parameters.%items.type": "{[s:string] : any}",
    "storage.types.$StorageArea.functions.%get.parameters.%callback.parameters.%items.additionalProperties": null,
    "cookies.functions.%getAll.parameters.%details.properties.firstPartyDomain.type": "string | null",
    "runtime.functions.%getManifest.returns": {
        "$ref": "Manifest.ManifestBase",
        "description": "The manifest details."
    },
    "runtime.types.$Port.properties.onDisconnect": {
        "isEvent": true,
        "name": "onDisconnect",
        "type": "function",
        "description": "",
        "parameters": [
            {
                "$ref": "Port",
                "name": "port"
            }
        ]
    },
    "runtime.types.$Port.properties.onMessage": {
        "isEvent": true,
        "name": "onMessage",
        "type": "function",
        "description": "",
        "parameters": [
            {
                "name": "message",
                "type": "any"
            },
            {
                "$ref": "Port",
                "name": "port"
            }
        ]
    },
    "extensionTypes.types.$Date.id": "DateType",
    "menus.functions.%create.parameters.%createProperties.properties.onclick.parameters.%info.$ref": "OnClickData",
    "menus.functions.%update.parameters.%updateProperties.properties.onclick.parameters.%info.$ref": "OnClickData",

    "webRequest.types.+[]": [{
        "id": "StreamFilterStatus",
        "type": "string",
        "enum": [{
            "name": "uninitialized",
            "description": "The StreamFilter is not fully initialized. No methods may be called until a \"start\" event has been received."
        }, {
            "name": "transferringdata",
            "description": "The underlying channel is currently transferring data, which will be dispatched via \"data\" events."
        }, {
            "name": "finishedtransferringdata",
            "description": "The underlying channel has finished transferring data. Data may still be written via write() calls at this point."
        }, {
            "name": "suspended",
            "description": "Data transfer is currently suspended. It may be resumed by a call to resume(). Data may still be written via write() calls in this state."
        }, {
            "name": "closed",
            "description": "The channel has been closed by a call to close(). No further data wlil be delivered via \"data\" events, and no further data may be written via write() calls."
        }, {
            "name": "disconnected",
            "description": "The channel has been disconnected by a call to disconnect(). All further data will be delivered directly, without passing through the filter. No further events will be dispatched, and no further data may be written by write() calls."
        }, {
            "name": "failed",
            "description": "An error has occurred and the channel is disconnected. The `error`, property contains the details of the error."
        }]
    },
    {
        "type": "object",
        "id": "StreamFilter",
        "description": "An interface which allows an extension to intercept, and optionally modify, response data from an HTTP request.",
        "functions": [{
            "type": "function",
            "name": "create",
            "description": "Creates a stream filter for the given add-on and the given extension ID.",
            "parameters": [{
                "name": "requestId",
                "type": "number"
            }, {
                "name": "addonId",
                "type": "string"
            }]
        }, {
            "type": "function",
            "name": "suspend",
            "description": "Suspends processing of the request. After this is called, no further data will be delivered until the request is resumed."
        }, {
            "type": "function",
            "name": "resume",
            "description": "Resumes delivery of data for a suspended request."
        }, {
            "type": "function",
            "name": "close",
            "description": "Closes the request. After this is called, no more data may be written to the stream, and no further data will be delivered. This *must* be called after the consumer is finished writing data, unless disconnect() has already been called."
        }, {
            "type": "function",
            "name": "disconnect",
            "description": "Disconnects the stream filter from the request. After this is called, no further data will be delivered to the filter, and any unprocessed data will be written directly to the output stream."
        }, {
            "type": "function",
            "name": "write",
            "description": "Writes a chunk of data to the output stream. This may not be called before the \"start\" event has been received.",
            "parameters": [{
                "name": "data",
                "type": "choices",
                "choices": [{
                    "type": "object",
                    "isInstanceOf": "ArrayBuffer"
                }, {
                    "type": "object",
                    "isInstanceOf": "Uint8Array"
                }]
            }]
        }],
        "properties": {
            "status": {
                "description": "Returns the current status of the stream.",
                "type": "ref",
                "$ref": "StreamFilterStatus"
            },
            "error": {
                "description": "After an \"error\" event has been dispatched, this contains a message describing the error.",
                "type": "string"
            }
        },
        "events": [{
            "id": "ondata",
            "type": "function",
            "description": "Dispatched with a StreamFilterDataEvent whenever incoming data is available on the stream. This data will not be delivered to the output stream unless it is explicitly written via a write() call.",
            "parameters": [{
                "type": "ref",
                "$ref": "StreamFilterEventData"
            }]
        }, {
            "id": "onstart",
            "type": "function",
            "description": "Dispatched when the stream is opened, and is about to begin delivering data.",
            "parameters": [{
                "type": "ref",
                "$ref": "StreamFilterEventData"
            }]
        }, {
            "id": "onstop",
            "type": "function",
            "description": "Dispatched when the stream has closed, and has no more data to deliver. The output stream remains open and writable until close() is called.",
            "parameters": [{
                "type": "ref",
                "$ref": "StreamFilterEventData"
            }]
        }, {
            "id": "onerror",
            "type": "function",
            "description": "Dispatched when an error has occurred. No further data may be read or written after this point.",
            "parameters": [{
                "type": "ref",
                "$ref": "StreamFilterEventData"
            }]
        }]
    },
    {
        "type": "object",
        "id": "StreamFilterEventData",
        "properties": {
            "data": {
                "description": "Contains a chunk of data read from the input stream.",
                "type": "object",
                "isInstanceOf": "ArrayBuffer"
            }
        }
    }]
}